// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: marketplace-goods.sql

package goods

import (
	"context"
)

const createGood = `-- name: CreateGood :exec
INSERT INTO goods (
     id, user_id, name, description, price, status, image_url)
VALUES (
     $1, $2, $3, $4, $5, $6, $7
)
`

type CreateGoodParams struct {
	ID          string
	UserID      string
	Name        string
	Description string
	Price       int64
	Status      string
	ImageUrl    string
}

func (q *Queries) CreateGood(ctx context.Context, arg CreateGoodParams) error {
	_, err := q.db.Exec(ctx, createGood,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Status,
		arg.ImageUrl,
	)
	return err
}

const deleteGood = `-- name: DeleteGood :exec
DELETE FROM goods
WHERE id = $1
`

func (q *Queries) DeleteGood(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteGood, id)
	return err
}

const getGood = `-- name: GetGood :one
SELECT id, user_id, name, description, price, status, image_url, created_at, updated_at FROM goods
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetGood(ctx context.Context, id string) (Good, error) {
	row := q.db.QueryRow(ctx, getGood, id)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGoods = `-- name: ListGoods :many
SELECT id, user_id, name, description, price, status, image_url, created_at, updated_at FROM goods
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListGoodsParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) ListGoods(ctx context.Context, arg ListGoodsParams) ([]Good, error) {
	rows, err := q.db.Query(ctx, listGoods, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Good
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Status,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGood = `-- name: UpdateGood :exec
UPDATE goods
SET
    name = $2,
    description = $3,
    price = $4,
    status = $5,
    image_url = $6
WHERE id = $1
`

type UpdateGoodParams struct {
	ID          string
	Name        string
	Description string
	Price       int64
	Status      string
	ImageUrl    string
}

func (q *Queries) UpdateGood(ctx context.Context, arg UpdateGoodParams) error {
	_, err := q.db.Exec(ctx, updateGood,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Status,
		arg.ImageUrl,
	)
	return err
}
